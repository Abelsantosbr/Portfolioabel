
@{ ViewData["Title"] = "CodigoCSharp"; }

<div>
    <textarea readonly class="tituloAreaCodigo">
       Código c# extraído de projeto há mais de 10 anos, sustentado até 08/2021.
       Necessita clean code para manter certo padrão de limpeza de código e outro princípios
    </textarea>
    <textarea readonly class="areaCodigo">
        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Web;
        using System.Web.Mvc;
        using Mvc_Crud_sgcr_Linq.Models;
        using System.Data;
        using System.Diagnostics;
        using System.Text;
        using System.IO;
        using SelectPdf;

        namespace Mvc_Crud_sgcr_Linq.Controllers
        {
        public class BoletosController : Controller
        {
        //
        // GET: /Boleto/

        private IBoletosRepositorio bol_repositorio;

        public BoletosController()
        : this(new BoletosRepositorio())
        {
        }

        private BoletosController(IBoletosRepositorio repositorio)
        {
        bol_repositorio = repositorio;

        }

        public ActionResult Index()
        {
        variaveis configuracoes = (variaveis)Session["configuracoes"];
        configuracoes.mnem_cond = Request["vmnem_cond"];
        configuracoes.bloco = Convert.ToChar(Request["vbloco"]);
        configuracoes.unidade = Convert.ToInt16(Request["vunidade"]);
        configuracoes.nome_mor = Request["vnomemor"];
        configuracoes.cpf = Request["vcpf"];
        var boleto = bol_repositorio.GetBoleto(configuracoes.cnpj_cliente,configuracoes.mnem_cond,configuracoes.bloco,configuracoes.unidade);
        ViewBag.cnpj_cliente = configuracoes.cnpj_cliente;//vcnpj_cliente;
        ViewBag.nome_cliente = configuracoes.nome_cliente; // vnome_cliente;
        ViewBag.mnem_cond = configuracoes.mnem_cond;
        ViewBag.bloco = configuracoes.bloco;
        ViewBag.unidade = configuracoes.unidade;
        ViewBag.nome_mor = configuracoes.nome_mor;
        //  Debug.WriteLine("gvSaida1e entrei no Index-Boleto....");

        return View(boleto);
        }

        public ActionResult GerarRemessa(long vcnpj_cliente, string vmnem_cond, char vbloco, short vunidade, DateTime vvencimento)
        {
        // Debug.WriteLine("gvSaida1e vencimento...." + vvencimento.ToString());

        int dia, mes, ano;
        dia = DateTime.Now.Day;
        mes = DateTime.Now.Month;
        ano = DateTime.Now.Year;
        variaveis configuracoes = (variaveis)Session["configuracoes"];
        configuracoes.mnem_cond = vmnem_cond;
        configuracoes.bloco = vbloco;
        configuracoes.unidade = vunidade;
        configuracoes.vencimento = vvencimento;
        configuracoes.cpf = Request["vcpf"];
        var model = bol_repositorio.GetBoletoPorVencimento(vcnpj_cliente, vmnem_cond, vbloco, vunidade, vvencimento);
        string nomearquivo = vmnem_cond.Trim() + dia.ToString("00") + mes.ToString("00") + ".TXT";
        byte[] arquivo = bol_repositorio.GerarRemessa(model);
        var caminho3 = System.Web.HttpContext.Current.Server.MapPath("~/");
        TempData["arquivo_download"] = nomearquivo; //caminho3+nomearquivo;

        return RedirectToAction("Index", new
        {
        vnome_cliente = configuracoes.nome_cliente,
        vcnpj_cliente = configuracoes.cnpj_cliente,
        vmnem_cond = configuracoes.mnem_cond,
        vbloco = configuracoes.bloco,
        vunidade = configuracoes.unidade,
        vnomemor = configuracoes.nome_mor,
        vcpf = configuracoes.cpf
        });

        }

        public FileResult DownloadRemessa(string vnome_arquivo)
        {
        var caminho = System.Web.HttpContext.Current.Server.MapPath("~/");
        byte[] fileBytes = System.IO.File.ReadAllBytes(caminho+vnome_arquivo);
        return File(fileBytes, System.Net.Mime.MediaTypeNames.Application.Octet, vnome_arquivo);

        }

        public FileResult DownloadBoleto(string vnome_arquivo)
        {
        var caminho = System.Web.HttpContext.Current.Server.MapPath("~/");

        //byte[] fileBytes = System.IO.File.ReadAllBytes(caminho + vnome_arquivo);
        //return File(fileBytes, System.Net.Mime.MediaTypeNames.Application.Octet, vnome_arquivo);
        string filepath = System.Web.HttpContext.Current.Server.MapPath("~/" + vnome_arquivo.Replace(caminho, ""));
        FileStream fs = null;
        try  //// this method is limited to 2^32 byte files (4.2 GB)
        {
        fs = System.IO.File.OpenRead(filepath);
        byte[] bytes = new byte[fs.Length];
        fs.Read(bytes, 0, Convert.ToInt32(fs.Length));
        FileResult fileResult = new FileContentResult(bytes, "application/pdf");
        //HttpContext.Current.Response.Write(fileResult);
        //HttpContext.Current.Response.Write("window.open(fileResult,'_blank')");
        return fileResult;
        }
        finally
        {
        if (fs != null)
        {
        fs.Close();
        fs.Dispose();
        }
        }

        }

        public ActionResult ImprimirBoleto(long vcnpj_cliente, string vmnem_cond, char vbloco, short vunidade, DateTime vvencimento)
        {


        // Debug.WriteLine("gvSaida1e vencimento...." + vvencimento.ToString());
        variaveis configuracoes = (variaveis)Session["configuracoes"];
        configuracoes.mnem_cond = vmnem_cond;
        configuracoes.bloco = vbloco;
        configuracoes.unidade =vunidade;
        configuracoes.vencimento =vvencimento;
        configuracoes.cpf = Request["vcpf"];
        var model = bol_repositorio.GetBoletoPorVencimento(vcnpj_cliente, vmnem_cond, vbloco, vunidade, vvencimento);
        long vnosso_numero = 0;
        bool atu_tab_num = false;
        Tab_nosso_num_Repositorio _tab_nosso_num_repositorio = new Tab_nosso_num_Repositorio();
        if (model.num2_titulo <= 0)
        {
        vnosso_numero = _tab_nosso_num_repositorio.GetNumTitulo();
        vnosso_numero = vnosso_numero + 1;   // proximo numero disponivel
        atu_tab_num = true;
        }
        else
        {
        vnosso_numero = model.num2_titulo;
        }

        configuracoes.num_titulo = vnosso_numero;
        string dvtitulo = bol_repositorio.Calc_Mod_dig10alt(vnosso_numero.ToString());
        CadcondRepositorio cond_rep = new CadcondRepositorio();
        var condominio = cond_rep.GetCondPorCond(vcnpj_cliente, vmnem_cond);
        //Debug.WriteLine("gvSaida1e carteira..." + cart_dvtitulo.ToString());

        if (atu_tab_num)
        {
        _tab_nosso_num_repositorio.AtualizaTabNumTitulo(vnosso_numero);
        //  Debug.WriteLine("gvSaida1e atu_tab_num...entrei");
        }
        bol_repositorio.AtualizarBoletoNumTitulo(vcnpj_cliente, vmnem_cond, vbloco, vunidade, vvencimento, condominio.carteira_cobr, vnosso_numero, Convert.ToChar(dvtitulo));
        var boleto = bol_repositorio.GetBoleto(configuracoes.cnpj_cliente, configuracoes.mnem_cond, configuracoes.bloco, configuracoes.unidade);
        string nomearquivo = bol_repositorio.ImprimirBoleto(model, configuracoes.nome_cliente, configuracoes.cpf, vnosso_numero);

        TempData["boleto_download"] = nomearquivo;
        //return fs;

        //          Response.Write("
    <script>
        ");
                                                        //        Response.Write("window.open(fs', '_newtab');");
                                                        //      Response.Write("</script>");
        //System.Web.HttpContext.Current.Response.BinaryWrite(fs.t);
        // TempData["mens_impr"] = "Boleto salvo na pasta TMPBOLETOS = "+vnosso_numero.ToString();
        // return View();

        return RedirectToAction("Index", new
        {
        vnome_cliente = configuracoes.nome_cliente,
        vcnpj_cliente = configuracoes.cnpj_cliente,
        vmnem_cond = configuracoes.mnem_cond,
        vbloco = configuracoes.bloco,
        vunidade = configuracoes.unidade,
        vnomemor = configuracoes.nome_mor,
        vcpf = configuracoes.cpf
        });
        }

        /*        public ActionResult ImprimirBoleto(string _mnem_cond, int _num_emissao, char _bloco, short _unidade)  */

        //        public ActionResult ImprimirBoleto()
        //        {
        /*            _repositorio.ImprimirBoleto(_mnem_cond, _num_emissao, _bloco, _unidade);   */
        //            bol_repositorio.Atualizar2avia(_num2_titulo);
        //            bol_repositorio.ImprimirBoleto(_num2_titulo);
        //            return null; /*return RedirectToAction("WebGridBoleto");  */
        //        }

        [HttpPost]
        public ActionResult AtualizarVencto(long vcnpj_cliente, string vmnemcond, int vnumemissao, char vbloco, short vunidade, string titulo, string novovencto, decimal vlmulta, DateTime vvencimentooriginal)
        {
        /*            _repositorio.ImprimirBoleto(_mnem_cond, _num_emissao, _bloco, _unidade);   */
        DetboleRepositorio detbole = new DetboleRepositorio();
        IList<DetboleModel>
            detboleListagem = new List<DetboleModel>
                ();
                detboleListagem = detbole.GetDetbolePorEmissao(vmnemcond, vnumemissao, vbloco, vunidade).ToList();
                decimal vltitulo = 0.00M;
                decimal vljuros = 0.00M;
                decimal vlcusto_boleto = 0.00M;
                decimal vlmj = 0.00M;
                bool achoumulta = false;
                short seqmulta = 0;
                short ultseq = 0;
                DetboleModel detboleModel = new DetboleModel();

                foreach (var item in detboleListagem)
                {
                ultseq = item.seq_item;
                if (item.cod_cta_grupo == 5 && item.cod_item_conta == 14)
                {
                achoumulta = true;
                seqmulta = item.seq_item;
                }
                else
                {
                if (item.cod_cta_grupo == 3)
                {
                if (item.cod_item_conta == 3) // porque conta=3 e item=3 ====. custo do boleto
                {
                vlcusto_boleto = item.vl_item;
                }
                else
                {
                vltitulo = vltitulo + item.vl_item;
                }
                }
                else
                {
                vltitulo = vltitulo + item.vl_item;
                }
                }
                }

                Mvc_Crud_sgcr_Linq.MD_sgcrDataContext mdx = new Mvc_Crud_sgcr_Linq.MD_sgcrDataContext();

                DateTime serverDate = mdx.GetSystemDate();
                int difdias = GetDiffDays(vvencimentooriginal, serverDate);

                detboleModel.mnem_cond = vmnemcond;
                detboleModel.num_emissao = vnumemissao;
                detboleModel.bloco = vbloco;
                detboleModel.unidade = vunidade;
                detboleModel.cod_cta_grupo = 5;
                detboleModel.cod_item_conta = 14;
                vlmulta = (vltitulo * 0.02m); //2%
                vljuros = (difdias * (vltitulo * 0.033m) / 100); //10%/mes=0,33333/dia  string.Format("{0:N}", 43239,11));
                vlmj = Math.Round(vlmulta + vljuros, 2);
                //            detboleModel.compl_hist = "Ref. " + Convert.ToString(difdias) + " Dias-Atraso" + "(Vl.Título = " + String.Format("{0:N}", vltitulo) + ")" + " (M: " + String.Format("{0:N}", vlmulta) + ")" + " (J: " + String.Format("{0:N}", vljuros) + ")" + " (Total = " + String.Format("{0:N}", (vltitulo + vlmj + vlcusto_boleto)) + ")";
                detboleModel.compl_hist = "Ref. " + Convert.ToString(difdias) + " Dias-Atraso" + "(Vl.Título = " + String.Format("{0:N}", vltitulo) + ")" + " (M: " + String.Format("{0:N}", vlmulta) + ")" + " (J: " + String.Format("{0:N}", vljuros) + ")";
                vltitulo = vltitulo + vlmj + vlcusto_boleto;
                detboleModel.vl_item = vlmj;
                if (achoumulta)
                {
                detboleModel.seq_item = seqmulta;
                detbole.AtualizarDetbole(detboleModel); }
                else
                {
                detboleModel.seq_item = ++ultseq;
                detbole.InserirDetbole(detboleModel); }

                bol_repositorio.AtualizarVencto(vcnpj_cliente, vmnemcond, vnumemissao, vbloco, vunidade, Convert.ToInt32(titulo), novovencto, vltitulo, vlmulta, serverDate);
                return RedirectToAction("WebGridBoleto");
                }


                public int GetDiffDays(DateTime initialDate, DateTime finalDate)
                {
                int days = 0;
                //            int daysCount = 0;
                days = initialDate.Subtract(finalDate).Days;
                //Módulo
                if (days < 0)
                days = days * -1;
                //            for (int i = 1; i <= days; i++)
                //               {
                //                initialDate = initialDate.AddDays(1);
                //Conta apenas dias da semana.
                //                if (initialDate.DayOfWeek != DayOfWeek.Sunday &&
                //                   initialDate.DayOfWeek != DayOfWeek.Saturday)
                //                   daysCount++;
                //	           }
                return days;
                }



                [Authorize]
                public ActionResult Details(int id)
                {
                BoletosModel model = bol_repositorio.GetBoletoPorTitulo(id);
                return View(model);
                }

                //        [Authorize]
                public ActionResult Create()
                {
                BoletosModel boleto = new BoletosModel();
                variaveis configuracoes = (variaveis)Session["configuracoes"];
                configuracoes.bloco = Convert.ToChar(Request["vbloco"]);
                configuracoes.unidade = Convert.ToInt16(Request["vunidade"]);
                configuracoes.nome_mor = Request["vnomemor"];
                boleto.cnpj_cliente = Convert.ToInt64(configuracoes.cnpj_cliente);
                boleto.mnem_cond = configuracoes.mnem_cond;
                boleto.bloco = configuracoes.bloco;
                boleto.unidade = configuracoes.unidade;

                ViewBag.cnpj_cliente = configuracoes.cnpj_cliente;
                ViewBag.nome_cliente = configuracoes.nome_cliente;
                ViewBag.mnem_cond = configuracoes.mnem_cond;
                ViewBag.bloco = configuracoes.bloco;
                ViewBag.unidade = configuracoes.unidade;
                ViewBag.nome_mor = configuracoes.nome_mor;

                return View(boleto);
                }


                [HttpPost]
                public ActionResult Create(BoletosModel boleto)
                {
                // Debug.WriteLine("gvSaida1e vencimento-post2" + Request["vl_titulo"].ToString());
                // Debug.WriteLine("gvSaida1e vencimento-post3" + Request["id_vencimento"].ToString());
                //            if (boleto.vl_titulo <=0 )
                //                  ModelState.AddModelError("vl_titulo", "Valor do título é obrigatório");
                //            Debug.WriteLine("gvSaida1e vl_titulo" + boleto.vl_titulo.ToString());
                variaveis configuracoes = (variaveis)Session["configuracoes"];

                // string vencimento = Request["vencimento"].ToString();
                // boleto.dt_vencimento_original = Convert.ToDateTime(vencimento);
                //boleto.vl_titulo = Convert.ToDecimal(Request["vl_titulo"].ToString());
                //   Debug.WriteLine("gvSaida1e valor-post3" + Request["vl_titulo"].ToString());
                // Debug.WriteLine("gvSaida1e vencimento-post1" + boleto.dt_vencimento_original.ToString());

                try
                {
                if (ModelState.IsValid)
                {
                //                     Debug.WriteLine("gvSaida1e = valido" );
                var model = bol_repositorio.GetBoletoPorVencimento(boleto.cnpj_cliente, boleto.mnem_cond,boleto.bloco, boleto.unidade, boleto.dt_vencimento_original);
                if (model.cnpj_cliente == 0)
                {
                bol_repositorio.InserirBoleto(boleto);
                Session["existe_titulo"] = "N";
                // Debug.WriteLine("gvSaida1e = ...Nao" );

                return RedirectToAction("Index", new
                {
                vnome_cliente = configuracoes.nome_cliente,
                vcnpj_cliente = configuracoes.cnpj_cliente,
                vmnem_cond = configuracoes.mnem_cond,
                vbloco = configuracoes.bloco,
                vunidade = configuracoes.unidade,
                vnomemor = configuracoes.nome_mor
                });
                }
                else
                {
                //                        Debug.WriteLine("gvSaida1e = invalido");
                Session["existe_titulo"] = "S";
                return View(boleto);
                }
                }
                else
                {
                //Debug.WriteLine("gvSaida1a = ModelState não valido");
                Session["existe_titulo"] = "R"; // erro de validação
                return View(boleto);

                }
                }
                catch (DataException)
                {
                ModelState.AddModelError("", "Problemas ao salvar os dados...");
                }
                return View(boleto);
                }


                public ActionResult Edit(long vcnpj_cliente, string vmnem_cond, char vbloco, short vunidade, DateTime vvencimento)
                {
                BoletosModel boleto = new BoletosModel();
                variaveis configuracoes = (variaveis)Session["configuracoes"];
                configuracoes.bloco = vbloco;
                configuracoes.unidade = vunidade;
                configuracoes.nome_mor = Request["vnomemor"];
                configuracoes.vencimento = vvencimento;
                configuracoes.vencimento_ant = vvencimento;
                boleto.cnpj_cliente = vcnpj_cliente;
                boleto.mnem_cond = configuracoes.mnem_cond;
                boleto.bloco = configuracoes.bloco;
                boleto.unidade = configuracoes.unidade;

                ViewBag.cnpj_cliente = configuracoes.cnpj_cliente;
                ViewBag.nome_cliente = configuracoes.nome_cliente;
                ViewBag.mnem_cond = configuracoes.mnem_cond;
                ViewBag.bloco = configuracoes.bloco;
                ViewBag.unidade = configuracoes.unidade;
                ViewBag.nome_mor = configuracoes.nome_mor;

                boleto = bol_repositorio.GetBoletoPorVencimento(vcnpj_cliente, vmnem_cond, vbloco, vunidade, vvencimento);
                //Debug.WriteLine("gvSaida1a = Vl_titulo ="+model.vl_titulo.ToString());
                return View(boleto);
                }

                [HttpPost]
                public ActionResult Edit(BoletosModel boleto)
                {
                variaveis configuracoes = (variaveis)Session["configuracoes"];
                try
                {
                if (ModelState.IsValid)
                {
                bol_repositorio.AtualizarBoleto(boleto, configuracoes.vencimento_ant);
                configuracoes.vencimento_ant = boleto.dt_vencimento_original;
                return RedirectToAction("Index", new
                {
                vnome_cliente = configuracoes.nome_cliente,
                vcnpj_cliente = configuracoes.cnpj_cliente,
                vmnem_cond = configuracoes.mnem_cond,
                vbloco = configuracoes.bloco,
                vunidade = configuracoes.unidade,
                vnomemor = configuracoes.nome_mor
                });
                }
                }
                catch (DataException)
                {
                ModelState.AddModelError("", "Problemas ao salvar os dados...");
                }
                return View(boleto);
                }


                public ActionResult Delete(long vcnpj_cliente, string vmnem_cond, char vbloco, short vunidade, DateTime vvencimento, bool? saveChangesError)
                {
                if (saveChangesError.GetValueOrDefault())
                {
                ViewBag.ErrorMessage = "Problema ao deletar dados";
                }
                BoletosModel model = bol_repositorio.GetBoletoPorVencimento(vcnpj_cliente, vmnem_cond, vbloco, vunidade, vvencimento);
                if (model == null)
                {
                //Debug.WriteLine("gvSaida2 = Nulo");
                }
                else
                {
                //Debug.WriteLine("gvSaida2 = Não Nulo");
                DeleteConfirmed(model.cnpj_cliente, model.mnem_cond, model.bloco, model.unidade, model.dt_vencimento_original);
                }
                variaveis configuracoes = (variaveis)Session["configuracoes"];
                ViewBag.cnpj_cliente = configuracoes.cnpj_cliente;
                ViewBag.nome_cliente = configuracoes.nome_cliente;

                return RedirectToAction("Index", new
                {
                vnome_cliente = configuracoes.nome_cliente,
                vcnpj_cliente = configuracoes.cnpj_cliente,
                vmnem_cond = configuracoes.mnem_cond,
                vbloco = configuracoes.bloco,
                vunidade = configuracoes.unidade,
                vnomemor = configuracoes.nome_mor,
                vvencimento = configuracoes.vencimento
                });
                }

                [HttpPost, ActionName("Delete")]
                [ValidateAntiForgeryToken]
                public ActionResult DeleteConfirmed(long Cnpj_cliente, string Mnem_cond, char Bloco, short Unidade, DateTime Vencimento)
                {
                try
                {
                //ClienteModel cliente = _repositorio.GetClientePorID(id);
                bol_repositorio.DeletarBoleto(Cnpj_cliente, Mnem_cond, Bloco, Unidade, Vencimento);
                }
                catch (DataException)
                {
                return RedirectToAction("Delete", new System.Web.Routing.RouteValueDictionary { { "id", Cnpj_cliente + Mnem_cond + Bloco + Unidade + Vencimento}, { "saveChangesError", true } });
                }
                variaveis configuracoes = (variaveis)Session["configuracoes"];
                return RedirectToAction("Index", new
                {
                vnome_cliente = configuracoes.nome_cliente,
                vcnpj_cliente = configuracoes.cnpj_cliente,
                vmnem_cond = configuracoes.mnem_cond,
                vbloco = configuracoes.bloco,
                vunidade = configuracoes.unidade,
                vvencimento = configuracoes.vencimento
                });
                }

                }
                }


    </textarea>
</div>
<!-- Estas variáveis tiveram o caractere "arroba" como prefixo retirado aqui para efeito de excluir os erro de compilação onde elas elexistem na tag <textarea>
      </textarea> mas elas são usadas por referência no projeto real :
    data1,data2,vazio,tipo,mnem_medico,Dt_fin_atend,ativo

-->

<div>
    <textarea readonly class="tituloAreaCodigo">
       Código c# extraído de projeto API recente, sustentado até 08/2021.
    </textarea>

    <textarea readonly class="areaCodigo">
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Web.Http;
    using System.Data.SqlClient;
    using AspNetWebApi_destake.Models;

    namespace AspNetWebApi_destake.Controllers
    {
    [RoutePrefix("api/projeto_destake")]
    public class DefaultController : ApiController
    {
        /* conexão -local        private string ConnectionString = "Data Source=PC-ESCR;User Id=xx;Password=xxxxx;Initial Catalog=serverdb"; */
        private string ConnectionString = "Data Source= destake.ddns.net,1433;DATABASE = destake;user = xx; Password = xxxxxx";

        [HttpGet]
        [Route("datahora/consulta")]
        public HttpResponseMessage GetDataHoraServidor()
        {
            try
            {
                var dataHora = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");

                return Request.CreateResponse(HttpStatusCode.OK, dataHora);
            }
            catch (Exception ex)
            {
                return Request.CreateResponse(HttpStatusCode.BadRequest, ex.Message);
            }
        }
        [HttpGet]
        [Route("listar/{id}")]
        public HttpResponseMessage GetByPeriodo(string id)
        {
            string mdata1, mdata2, k1, k2;
            k1 = id.Substring(0,8);
            k2 = id.Substring(9, 8);
            mdata1 = k1.Substring(0, 2) + "/" + k1.Substring(2, 2)+"/"+k1.Substring(4,4);
            mdata2 = k2.Substring(0, 2) + "/" + k2.Substring(2, 2) + "/" + k2.Substring(4, 4);

            try
            {
                List<Atendimento>
                    lstClientes = new List<Atendimento>
                        ();
                using (SqlConnection connection = new SqlConnection(this.ConnectionString))
                {

                    connection.Open();

                    using (SqlCommand command = new SqlCommand())
                    {
                        // Criando o SqlCommand com parâmetro
                        command.Connection = connection;
                        SqlCommand cmd = new SqlCommand(
                        "select Num_pront, Data_atend, Hora_atend, Mnem_conv, Mnem_medico, Tipo_atend, ult_pgto "+
                        "from cad_atend where Convert(Datetime,Data_atend,103) >= Convert(DateTime,data1,103) and "+
                        "Convert(DateTime,Data_atend,103) <= Convert(DateTime,data2,103) and "+
                        "LTRIM(RTRIM(Mnem_medico)) <> vazio and LTRIM(RTRIM(mnem_conv)) <> vazio " , connection);
                        cmd.Parameters.AddWithValue("data1", mdata1);
                        cmd.Parameters.AddWithValue("data2", mdata2);
                        cmd.Parameters.AddWithValue("vazio", "");
                        //cmd.Parameters.AddWithValue("Dt_fin_atend", endDate);
                        SqlDataReader reader = cmd.ExecuteReader();
                        // Define as informações do parâmetro criado


                        while (reader.Read())
                        {
                            Atendimento cliente = new Atendimento()
                            {
                                Num_pront = reader["Num_pront"] == DBNull.Value ? 0 : Convert.ToInt32(reader["Num_pront"]),
                                Data_atend = reader["Data_atend"] == DBNull.Value ? string.Empty : reader["Data_atend"].ToString(),
                                Hora_atend = reader["Hora_atend"] == DBNull.Value ? string.Empty : reader["Hora_atend"].ToString(),
                                Mnem_conv = reader["Mnem_conv"] == DBNull.Value ? string.Empty : reader["Mnem_conv"].ToString(),
                                Mnem_medico = reader["Mnem_medico"] == DBNull.Value ? string.Empty : reader["Mnem_medico"].ToString(),
                                Tipo_atend = reader["Tipo_atend"] == DBNull.Value ? string.Empty : reader["Tipo_atend"].ToString(),
                                Ult_pgto = reader["Ult_pgto"] == DBNull.Value ? DateTime.MinValue : Convert.ToDateTime(reader["Ult_pgto"]),
                            };

                            lstClientes.Add(cliente);
                        }
                    }

                    connection.Close();
                }

                return Request.CreateResponse(HttpStatusCode.OK, lstClientes.ToArray());
            }
            catch (Exception ex)
            {
                return Request.CreateResponse(HttpStatusCode.BadRequest, ex.Message);
            }
        }
        [HttpGet]
        [Route("apurar/{id}")]
        public HttpResponseMessage ApurarByPeriodo(string id)
        {
            string mdata1, mdata2, k1, k2;

            k1 = id.Substring(0, 8);
            k2 = id.Substring(9, 8);
            mdata1 = k1.Substring(0, 2) + "/" + k1.Substring(2, 2) + "/" + k1.Substring(4, 4);
            mdata2 = k2.Substring(0, 2) + "/" + k2.Substring(2, 2) + "/" + k2.Substring(4, 4);
            try
            {
                List<Totais>
                    lstTotais = new List<Totais>
                        ();
                List<cadastroMedicos>
                    lstMedicos = new List<cadastroMedicos>
                        ();
                List<atendPorMedico>
                    lstAtendPorMedico = new List<atendPorMedico>
                        ();  // atendimentos por médico

                using (SqlConnection connection = new SqlConnection(this.ConnectionString))
                {

                    connection.Open();

                    using (SqlCommand command = new SqlCommand())
                    {
                        // Criando o SqlCommand com parâmetro
                        command.Connection = connection;
                        SqlCommand cmd = new SqlCommand(
                        "select count(b.num_pront) as Total from cad_pac as a inner join cad_atend as b " +
                        " on a.num_pront = b.num_pront " +
                        " where Convert(Datetime,b.Data_atend,103) >= Convert(DateTime,data1,103) and " +
                        "Convert(DateTime,b.Data_atend,103) <= Convert(DateTime,data2,103) and "+
                        "LTRIM(RTRIM(b.Mnem_medico)) <> vazio and LTRIM(RTRIM(b.mnem_conv)) <> vazio " , connection);
                        cmd.Parameters.AddWithValue("data1", mdata1);
                        cmd.Parameters.AddWithValue("data2", mdata2);
                        cmd.Parameters.AddWithValue("vazio","");
                        //cmd.Parameters.AddWithValue("Dt_fin_atend", endDate);
                        SqlDataReader reader = cmd.ExecuteReader();
                        reader.Read();
                        Totais mtotais = new Totais();
                        mtotais.Total = "T" + Convert.ToString(reader["Total"]);
                        reader.Close();

                        cmd = new SqlCommand(
                        "select count(a.num_pront) as Novos from cad_pac as a inner join cad_atend as b " +
                        " on a.num_pront = b.num_pront " +
                        " where Convert(Datetime,b.Data_atend,103) >= Convert(DateTime,data1,103) and " +
                        "Convert(DateTime,b.Data_atend,103) <= Convert(DateTime,data2,103) and " +
                        "Convert(Date, b.Data_atend, 103) = Convert(varchar(10), a.Data_inclusao,103) and "+
                        "LTRIM(RTRIM(b.Mnem_medico)) <> vazio and LTRIM(RTRIM(b.mnem_conv)) <> vazio ", connection);
                        cmd.Parameters.AddWithValue("data1", mdata1);
                        cmd.Parameters.AddWithValue("data2", mdata2);
                        cmd.Parameters.AddWithValue("vazio", "");
                        //cmd.Parameters.AddWithValue("Dt_fin_atend", endDate);
                        reader = cmd.ExecuteReader();
                        reader.Read();
                        mtotais.Novos = "V" + Convert.ToString(reader["Novos"]);
                        reader.Close();

                        cmd = new SqlCommand("select count(*) as Totaln from cad_atend" +
                        " where Convert(Datetime,Data_atend,103) >= Convert(DateTime,data1,103) and " +
                        "Convert(DateTime,Data_atend,103) <= Convert(DateTime,data2,103) and tipo_atend = tipo and "+
                        "LTRIM(RTRIM(Mnem_medico)) <> vazio and LTRIM(RTRIM(mnem_conv)) <> vazio ", connection);
                        cmd.Parameters.AddWithValue("data1", mdata1);
                        cmd.Parameters.AddWithValue("data2", mdata2);
                        cmd.Parameters.AddWithValue("tipo", "N");
                        cmd.Parameters.AddWithValue("vazio","");
                        //cmd.Parameters.AddWithValue("Dt_fin_atend", endDate);
                        reader = cmd.ExecuteReader();
                        reader.Read();

                        mtotais.Totaln = "N"+Convert.ToString(reader["Totaln"]);
                        reader.Close();

                        cmd = new SqlCommand("select count(*) as Totalr from cad_atend" +
                        " where Convert(Datetime,Data_atend,103) >= Convert(DateTime,data1,103) and " +
                        "Convert(DateTime,Data_atend,103) <= Convert(DateTime,data2,103) and tipo_atend = tipo and "+
                        "LTRIM(RTRIM(Mnem_medico)) <> vazio and LTRIM(RTRIM(mnem_conv)) <> vazio ", connection);
                        cmd.Parameters.AddWithValue("data1", mdata1);
                        cmd.Parameters.AddWithValue("data2", mdata2);
                        cmd.Parameters.AddWithValue("tipo", "R");
                        cmd.Parameters.AddWithValue("vazio", "");
                        //cmd.Parameters.AddWithValue("Dt_fin_atend", endDate);
                        reader = cmd.ExecuteReader();
                        reader.Read();
                        mtotais.Totalr = "R"+Convert.ToString(reader["Totalr"]);
                        lstTotais.Add(mtotais);
                        reader.Close();
                        lstAtendPorMedico.Add(new atendPorMedico()
                        {
                            Mnem_medico = "TODO",
                            Nome_medico ="Todos os médicos",
                            Normal = mtotais.Totaln,
                            Retorno = mtotais.Totalr,
                            Total = mtotais.Total,
                            Novos = mtotais.Novos,
                        });
                        //============================== por medico ====================================
                        //                        cmd = new SqlCommand("select mnem_medico, nome_medico from cad_medicos " +
                        //                                              "where ativo=Convert(bit,ativo)", connection);
                        //                        cmd.Parameters.AddWithValue("ativo", "1");
                        cmd = new SqlCommand("select mnem_medico, nome_medico from cad_medicos order by nome_medico ", connection);
                        reader = cmd.ExecuteReader();

                        if (reader.HasRows)
                        {
                            while (reader.Read())
                            {
                                cadastroMedicos mMedicos = new cadastroMedicos()
                                {
                                    Mnem_medico = reader["Mnem_medico"] == DBNull.Value ? string.Empty : reader["Mnem_medico"].ToString(),
                                    Nome_medico = reader["Nome_medico"] == DBNull.Value ? string.Empty : reader["Nome_medico"].ToString(),
                                };
                                lstMedicos.Add(mMedicos);
                            }
                        }
                        atendPorMedico mAtend = new atendPorMedico();
                        int aux = 0;
                        foreach (cadastroMedicos m in lstMedicos)
                        {
                            //Pecorre todos os itens dos pedidos
                            aux = Apura_total(m.Mnem_medico, mdata1, mdata2);
                            if (aux > 0)
                            {
                                lstAtendPorMedico.Add(new atendPorMedico()
                                {
                                    Mnem_medico = m.Mnem_medico,
                                    Nome_medico = m.Nome_medico,
                                    Normal = Apura_normal(m.Mnem_medico, mdata1, mdata2).ToString(),
                                    Retorno = Apura_retorno(m.Mnem_medico, mdata1, mdata2).ToString(),
                                    Total = aux.ToString(),
                                    Novos = Apura_novos(m.Mnem_medico, mdata1, mdata2).ToString(),
                                });
                            }
                        }

                        reader.Close();
                    }

                    connection.Close();
                    //                    return Request.CreateResponse(HttpStatusCode.OK, lstTotais);
                    //return Request.CreateResponse(HttpStatusCode.OK, lstMedicos.ToArray()+"\n"+lstMedicos.Count().ToString());
                    return Request.CreateResponse(HttpStatusCode.OK, lstAtendPorMedico.ToArray());

                }
            }
            catch (Exception ex)
            {
                return Request.CreateResponse(HttpStatusCode.BadRequest, ex.Message);
            }
        }

        public int Apura_total(string mnem_medico, string mdata1, string mdata2)
        {
            using (SqlConnection connection = new SqlConnection(this.ConnectionString))
            {

                connection.Open();

                using (SqlCommand command = new SqlCommand())
                {
                    command.Connection = connection;
                    SqlCommand cmd = new SqlCommand(
                    "select count(b.num_pront) as Total from cad_pac as a inner join cad_atend as b " +
                    " on a.num_pront = b.num_pront " +
                    " where Convert(Datetime,b.Data_atend,103) >= Convert(DateTime,data1,103) and " +
                    "Convert(DateTime,b.Data_atend,103) <= Convert(DateTime,data2,103) and " +
                    "b.mnem_medico = mnem_medico and LTRIM(RTRIM(b.mnem_conv)) <> vazio ", connection);
                    cmd.Parameters.AddWithValue("data1", mdata1);
                    cmd.Parameters.AddWithValue("data2", mdata2);
                    cmd.Parameters.AddWithValue("mnem_medico", mnem_medico);
                    cmd.Parameters.AddWithValue("vazio", "");
                    SqlDataReader reader = cmd.ExecuteReader();
                    reader.Read();
                    int x  = Convert.ToInt32(reader["Total"]);
                    reader.Close();
                    connection.Close();

                    return  x;
                }
            }
        }

        public int Apura_normal(string mnem_medico, string mdata1, string mdata2)
        {
            using (SqlConnection connection = new SqlConnection(this.ConnectionString))
            {

                connection.Open();

                using (SqlCommand command = new SqlCommand())
                {
                    command.Connection = connection;
                    SqlCommand cmd = new SqlCommand(
                    "select count(*) as Totaln from cad_atend" +
                    " where Convert(Datetime,Data_atend,103) >= Convert(DateTime,data1,103) and " +
                    "Convert(DateTime,Data_atend,103) <= Convert(DateTime,data2,103) and tipo_atend = tipo and "+
                    "mnem_medico = mnem_medico and LTRIM(RTRIM(mnem_conv)) <> vazio ", connection);
                    cmd.Parameters.AddWithValue("data1", mdata1);
                    cmd.Parameters.AddWithValue("data2", mdata2);
                    cmd.Parameters.AddWithValue("tipo", "N");
                    cmd.Parameters.AddWithValue("mnem_medico", mnem_medico);
                    cmd.Parameters.AddWithValue("vazio", "");
                    SqlDataReader reader = cmd.ExecuteReader();
                    reader.Read();
                    int x = Convert.ToInt32(reader["Totaln"]);
                    reader.Close();
                    connection.Close();

                    return x;
                }
            }
        }
        public int Apura_retorno(string mnem_medico, string mdata1, string mdata2)
        {
            using (SqlConnection connection = new SqlConnection(this.ConnectionString))
            {

                connection.Open();

                using (SqlCommand command = new SqlCommand())
                {
                    command.Connection = connection;
                    SqlCommand cmd = new SqlCommand(
                    "select count(*) as Totalr from cad_atend" +
                    " where Convert(Datetime,Data_atend,103) >= Convert(DateTime,data1,103) and " +
                    "Convert(DateTime,Data_atend,103) <= Convert(DateTime,data2,103) and tipo_atend = tipo and " +
                    "mnem_medico = mnem_medico and LTRIM(RTRIM(mnem_conv)) <> vazio ", connection);
                    cmd.Parameters.AddWithValue("data1", mdata1);
                    cmd.Parameters.AddWithValue("data2", mdata2);
                    cmd.Parameters.AddWithValue("tipo", "R");
                    cmd.Parameters.AddWithValue("mnem_medico", mnem_medico);
                    cmd.Parameters.AddWithValue("vazio", "");
                    SqlDataReader reader = cmd.ExecuteReader();
                    reader.Read();
                    int x = Convert.ToInt32(reader["Totalr"]);
                    reader.Close();
                    connection.Close();

                    return x;
                }
            }
        }
        public int Apura_novos(string mnem_medico, string mdata1, string mdata2)
        {
            using (SqlConnection connection = new SqlConnection(this.ConnectionString))
            {

                connection.Open();

                using (SqlCommand command = new SqlCommand())
                {
                    command.Connection = connection;
                    SqlCommand cmd = new SqlCommand(
                    "select count(a.num_pront) as Novos from cad_pac as a inner join cad_atend as b " +
                    " on a.num_pront = b.num_pront " +
                    " where Convert(Datetime,b.Data_atend,103) >= Convert(DateTime,data1,103) and " +
                    "Convert(DateTime,b.Data_atend,103) <= Convert(DateTime,data2,103) and " +
                    "Convert(Date, b.Data_atend, 103) = Convert(varchar(10), a.Data_inclusao,103) and "+
                    "b.mnem_medico = mnem_medico and LTRIM(RTRIM(b.mnem_conv)) <> vazio ", connection);
                    cmd.Parameters.AddWithValue("data1", mdata1);
                    cmd.Parameters.AddWithValue("data2", mdata2);
                    cmd.Parameters.AddWithValue("mnem_medico", mnem_medico);
                    cmd.Parameters.AddWithValue("vazio", "");
                    SqlDataReader reader = cmd.ExecuteReader();
                    reader.Read();
                    int x = Convert.ToInt32(reader["Novos"]);
                    reader.Close();
                    connection.Close();

                    return x;
                }
            }
        }

    }
}
    </textarea>

</div>


