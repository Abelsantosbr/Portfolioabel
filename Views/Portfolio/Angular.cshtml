@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{ ViewData["Title"] = "Angular"; }

<div>
    <textarea readonly class="tituloAreaCodigo">
       Angular 2  (Angular 2+)
    </textarea>

    <p readonly class="areaTexto">
        No final de 2021 comecei a me interessar pelo framework Angular 2.<br />
        Angular é um Framework open source e criado pelos desenvolvedores do Google para a criação de aplicação front-end, interface de
        usuário Html e estilosa com css e com linguagem javascript (Typescript).<br />

        O Framework nos ajuda a criar aplicações de página única (SPA Single-Page Applications) com qualidade e alta produtividade com o
        desenvolvimento de componentes, serviços, módulos e outros elementos que torna o angular versátil e poderoso.<br />

        Como estou iniciando esta tecnologia framework não posso dizer muito mas deixo abaixo um exmeplo que estou desenvolvendo
        com diversos problemas de um iniciante mas que até o momento funcional.<br />
        <br />
        Trata-se de um projeto de administração de condomínios pois já sou veterano nas regras de negócios deste seguimento.<br />
        O projeto possui as entidades de Proprietário, Morador e Síndico. São implementadas as classes, componentes front-end e serviços
        que acessam web API´s que desenvolvi em Dotnet para a conexão com dados do modelo.<br />

        O código não está limpo pois ainda estou criando muitos comentários para ir me familiarizando com o framework.<br />
        <br />
    </p>
    <br />
    <p class="areaTexto">
        O objetivo deste portfólio é demonstrar minhas habilidades e não desenvolver um tutorial/curso (Quem me dera !).
        Portanto, para não sobrecarregar esta página demais, demonstro o componente Proprietário, o código Html/css e um serviço
        apenas para ilustrar estes elementos.<br />
    </p>
    <div>
        <a href="~/imagens/Angular_login.png">Foto Login </a>
        <br />
        <a href="~/imagens/Angular_casas.png">Foto Tela Gestão </a>
        <br />
        <a href="~/imagens/Angular_atualizacao.png">Foto Tela de Atualização </a>
        <br />
    </div>
    <span style="color:red">
        ATENÇÂO !!! Substituir o caracter especial & por arroba (não pode usar no texto por ser carater reservado)
    </span><br />
    <br />

    <h4> Código Typescrypt - Classe Proprietário</h4>
    <textarea readonly class="areaCodigo">
import { Binary, DeclarationListEmitMode } from "&angular/compiler";
import { Byte } from "&angular/compiler/src/util";

export class Proprietario {
    proprietarioId : number;
    unidade_cond : number;
    dt_ini_prop : Date;
    dt_fin_prop : Date;
    nome : string;
    sobrenome : string;
    data_nasc : Date;
    profissao : string;
    cpf : string;
    rg : string;
    unidade_alugada : string;
    login: string;
    senha : string;
}
    </textarea>
    <br />

    <h4> Código Typescrypt - Componente Proprietário</h4>
    <textarea readonly class="areaCodigo">
import { DATE_PIPE_DEFAULT_TIMEZONE } from '&angular/common';
import { Component, Input, OnInit, Output, TemplateRef, TestabilityRegistry } from '&angular/core';
import { FormControl, FormGroup } from '&angular/forms';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { Proprietario } from 'src/app/Proprietario';
import { Account } from 'src/app/Account';
import { Morador }      from 'src/app/Morador';
import { Sindico }      from 'src/app/Sindico';
import { ProprietariosService } from 'src/app/proprietarios.service';
import { MoradoresService } from 'src/app/moradores.service';
import { SindicosService } from 'src/app/sindicos.service';
import { AccountService } from 'src/app/account.service';
import { MoradoresComponent } from '../moradores/moradores.component';
import { Login } from 'src/app/Login';

&Component({
  selector: 'app-proprietarios',
  templateUrl: './proprietarios.component.html', 
  styleUrls: ['./proprietarios.component.css']
})
export class ProprietariosComponent implements OnInit {
    formulario : any;
    tituloFormulario : string;
    proprietarios: Proprietario[];
    sindicos: Sindico[];
    
    
    &Input() moradores: Morador[];
    

    account: Account[];
    
    nomeProprietario: string;
    proprietarioId: number;
    nomeMorador: string;
    moradorId: number;

    data_nasc_formatada : Date;
    private dia : string;
    private mes : string;
    private ano : string;
    private vdata_nasc : string;
    private vdt_ini_prop : string;
    private vdt_fin_prop : string;
    private vdt_ini_mor : string;
    private vdt_fin_mor : string;
    private vdt_ini_sind : string;
    private vdt_fin_sind : string;

    private barra = /\//g;  // regex para remover todas as ocorrências da / da data
    private traco = /-/g; // regex para remover todas as ocorrências da - da data
    visibilidadeBotoes : boolean = false;
    visibilidadeTabela : boolean = true;
    visibilidadeFormularioProp : boolean = false;
    visibilidadeFormularioMor: boolean = false;
    visibilidadeFormularioSind : boolean = false;

    modalRef: BsModalRef;

    vl_chkbx: string;
    checkMe: boolean;
    
    session :string;
    sindico :string;

  constructor(private proprietariosService: ProprietariosService, private moradoresService: MoradoresService,
              private accountService: AccountService, private sindicosService: SindicosService,
              private modalService:BsModalService)  { }    
             
             
              


  ngOnInit(): void {
   
    this.tituloFormulario = 'Novo Proprietário';
    this.session = sessionStorage.getItem('usu');
    this.sindico = sessionStorage.getItem('sindico');
 
    if (this.sindico === 'sim')
    {
      this.session+= '  (Síndico)';
      this.visibilidadeBotoes  = true;
      this.SelecionaTodos();
     }
     else
     {
       this.visibilidadeBotoes  = false;
       this.SelecionaUnico();
     };
     
  }

  ExibirFormularioCadastroProp() : void {
   
    this.visibilidadeTabela = false;
    this.visibilidadeFormularioProp = true;
    this.visibilidadeFormularioMor = false;
    this.visibilidadeFormularioSind = false;
    this.tituloFormulario = 'Novo Proprietário';
   
    this.formulario = new FormGroup ({
       unidade_cond:  new FormControl(null),
       dt_ini_prop: new FormControl(null),
       dt_fin_prop: new FormControl(null),
       nome: new FormControl(null),
       sobrenome: new FormControl(null), 
       data_nasc: new FormControl(null),
       profissao: new FormControl(null),
       cpf: new FormControl(null),
       rg: new FormControl(null),
       unidade_alugada: new FormControl(null),
       login: new FormControl(null),
       senha: new FormControl(null)

    });
   
}

ExibirFormularioCadastroMor() : void {
   
  this.visibilidadeTabela = false;
  this.visibilidadeFormularioProp = false;
  this.visibilidadeFormularioMor = true;
  this.visibilidadeFormularioSind = false;

  this.tituloFormulario = 'Novo Morador';
 
  this.formulario = new FormGroup ({
     unidade_cond:  new FormControl(null),
     dt_ini_mor: new FormControl(null),
     dt_fin_mor: new FormControl(null),
     nome: new FormControl(null),
     sobrenome: new FormControl(null), 
     data_nasc: new FormControl(null),
     profissao: new FormControl(null),
     cpf: new FormControl(null),
     rg: new FormControl(null),
     login: new FormControl(null),
     senha: new FormControl(null)

  });
 
}

ExibirFormularioCadastroSind() : void {
   
  this.visibilidadeTabela = false;
  this.visibilidadeFormularioProp = false;
  this.visibilidadeFormularioMor = false;
  this.visibilidadeFormularioSind = true;

  this.tituloFormulario = 'Novo Síndico';
 
  this.formulario = new FormGroup ({
     Id:  new FormControl(null),
     unidade_cond: new FormControl(null),
     periodo_ini: new FormControl(null),
     periodo_fin: new FormControl(null)

  });
 
}


ExibirFormularioAtualizacaoProp(proprietarioId): void{
  

  this.visibilidadeTabela = false;
  this.visibilidadeFormularioProp = true;

  this.proprietariosService.PegarPeloId(proprietarioId).subscribe(resultado  => {
     this.tituloFormulario = ` ${resultado.nome} ${resultado.sobrenome} `;
     
          
  this.vdata_nasc = resultado.data_nasc.toString().substr(0,10);
  this.vdata_nasc = this.vdata_nasc.replace(this.traco,'');
  this.dia = this.vdata_nasc.substr(6,2);
  this.mes = this.vdata_nasc.substr(4,2);
  this.ano = this.vdata_nasc.substr(0,4);
  this.vdata_nasc = this.dia+'/'+this.mes+'/'+this.ano;

  this.vdt_ini_prop = resultado.dt_ini_prop.toString().substr(0,10);
  this.vdt_ini_prop = this.vdt_ini_prop.replace(this.traco,'');
  this.dia = this.vdt_ini_prop.substr(6,2);
  this.mes = this.vdt_ini_prop.substr(4,2);
  this.ano = this.vdt_ini_prop.substr(0,4);
  this.vdt_ini_prop = this.dia+'/'+this.mes+'/'+this.ano;

  this.vdt_fin_prop = resultado.dt_fin_prop.toString().substr(0,10);
  this.vdt_fin_prop = this.vdt_fin_prop.replace(this.traco,'');
  this.dia = this.vdt_fin_prop.substr(6,2);
  this.mes = this.vdt_fin_prop.substr(4,2);
  this.ano = this.vdt_fin_prop.substr(0,4);
  this.vdt_fin_prop = this.dia+'/'+this.mes+'/'+this.ano;
  if (resultado.unidade_alugada == 'S')
  {
      this.checkMe = true;
      this.vl_chkbx = 'S';
  }
  else
  {
      this.checkMe = false; 
      this.vl_chkbx = 'N';
  }
   
  this.formulario = new FormGroup({
      proprietarioId: new FormControl(resultado.proprietarioId),
      unidade_cond: new FormControl(resultado.unidade_cond),
      dt_ini_prop: new FormControl(this.vdt_ini_prop),
      dt_fin_prop: new FormControl(this.vdt_fin_prop),
      nome: new FormControl(resultado.nome),
      sobrenome: new FormControl(resultado.sobrenome),
      data_nasc: new FormControl(this.vdata_nasc),
      profissao: new FormControl(resultado.profissao),
      cpf: new FormControl(resultado.cpf),
      rg: new FormControl(resultado.rg),
      unidade_alugada: new FormControl(this.checkMe),
      login: new FormControl(resultado.login),
      senha: new FormControl(resultado.senha)
      
    });
   
   });
  }

  ExibirFormularioAtualizacaoMor(moradorId): void{
  

    this.visibilidadeTabela = false;
    this.visibilidadeFormularioProp = false;
    this.visibilidadeFormularioMor = true;
  
    this.moradoresService.PegarPeloId(moradorId).subscribe(resultado  => {
       this.tituloFormulario = ` ${resultado.nome} ${resultado.sobrenome} `;
       
            
    this.vdata_nasc = resultado.data_nasc.toString().substr(0,10);
    this.vdata_nasc = this.vdata_nasc.replace(this.traco,'');
    this.dia = this.vdata_nasc.substr(6,2);
    this.mes = this.vdata_nasc.substr(4,2);
    this.ano = this.vdata_nasc.substr(0,4);
    this.vdata_nasc = this.dia+'/'+this.mes+'/'+this.ano;
  
    this.vdt_ini_mor = resultado.dt_ini_mor.toString().substr(0,10);
    this.vdt_ini_mor = this.vdt_ini_mor.replace(this.traco,'');
    this.dia = this.vdt_ini_mor.substr(6,2);
    this.mes = this.vdt_ini_mor.substr(4,2);
    this.ano = this.vdt_ini_mor.substr(0,4);
    this.vdt_ini_mor = this.dia+'/'+this.mes+'/'+this.ano;

    this.vdt_fin_mor = resultado.dt_fin_mor.toString().substr(0,10);
    this.vdt_fin_mor = this.vdt_fin_mor.replace(this.traco,'');
    this.dia = this.vdt_fin_mor.substr(6,2);
    this.mes = this.vdt_fin_mor.substr(4,2);
    this.ano = this.vdt_fin_mor.substr(0,4);
    this.vdt_fin_mor = this.dia+'/'+this.mes+'/'+this.ano;
     
    this.formulario = new FormGroup({
        moradorId: new FormControl(resultado.moradorId),
        unidade_cond: new FormControl(resultado.unidade_cond),
        dt_ini_mor: new FormControl(this.vdt_ini_mor),
        dt_fin_mor: new FormControl(this.vdt_fin_mor),
        nome: new FormControl(resultado.nome),
        sobrenome: new FormControl(resultado.sobrenome),
        data_nasc: new FormControl(this.vdata_nasc),
        profissao: new FormControl(resultado.profissao),
        cpf: new FormControl(resultado.cpf),
        rg: new FormControl(resultado.rg),
        login: new FormControl(resultado.login),
        senha: new FormControl(resultado.senha)
        
      });
     
     });
    }

    
  Chkbx_unidade_alugada(checkbox): string {
   

    if (checkbox.target.checked)
       this.vl_chkbx = 'S';
    else 
       this.vl_chkbx = 'N';
    return this.vl_chkbx;
}

EnviarFormularioProp(): void {
      const proprietario: Proprietario = this.formulario.value;
      
       if(proprietario.proprietarioId > 0) {
         proprietario.unidade_alugada =  this.vl_chkbx;
         //this.vdata = proprietario.data_nasc.toString().split('/').join(''); funciona para remover todas as ocorrências
          this.vdata_nasc = proprietario.data_nasc.toString().replace(this.barra,'');
         
          this.dia = this.vdata_nasc.substr(0,2);
          this.mes = this.vdata_nasc.substr(2,2);
          this.ano = this.vdata_nasc.substr(4,4);
          this.vdata_nasc = this.ano+'-'+this.mes+'-'+this.dia;
          proprietario.data_nasc = new Date(this.vdata_nasc);
          
          this.vdt_ini_prop = proprietario.dt_ini_prop.toString().replace(this.barra,'');
          this.dia = this.vdt_ini_prop.substr(0,2);
          this.mes = this.vdt_ini_prop.substr(2,2);
          this.ano = this.vdt_ini_prop.substr(4,4);
          this.vdt_ini_prop = this.ano+'-'+this.mes+'-'+this.dia;
          proprietario.dt_ini_prop = new Date(this.vdt_ini_prop);

          this.vdt_fin_prop = proprietario.dt_fin_prop.toString().replace(this.barra,'');
          this.dia = this.vdt_fin_prop.substr(0,2);
          this.mes = this.vdt_fin_prop.substr(2,2);
          this.ano = this.vdt_fin_prop.substr(4,4);
          this.vdt_fin_prop = this.ano+'-'+this.mes+'-'+this.dia;
          proprietario.dt_fin_prop = new Date(this.vdt_fin_prop);
          
          proprietario.cpf = proprietario.cpf.toString();
          proprietario.rg  = proprietario.rg.toString();
          
          this.proprietariosService.AtualizarProprietario(proprietario).subscribe(resultado => {
             this.visibilidadeTabela = true;
             this.visibilidadeFormularioProp = false;
             alert('Proprietário atualizado com sucesso !!!');
             if (this.sindico === 'sim') {
                this.SelecionaTodos();
             }
             else
             {
                this.SelecionaUnico();
            };
           });
         }
       else
         { 
           proprietario.unidade_alugada = this.vl_chkbx;
           
           this.proprietariosService.SalvarProprietario(proprietario).subscribe(Resultado => {
            this.visibilidadeTabela = true;
            this.visibilidadeFormularioProp = false;
            alert('Proprietário inserido com sucesso !!!');
            this.proprietariosService.PegarTodos().subscribe((registros) => {
                this.proprietarios = registros;
                });
              });

      }
    }

    EnviarFormularioMor(): void {
      const morador: Morador = this.formulario.value;
      
       if(morador.moradorId > 0) {
        
         //this.vdata = proprietario.data_nasc.toString().split('/').join(''); funciona para remover todas as ocorrências
          this.vdata_nasc = morador.data_nasc.toString().replace(this.barra,'');
         
          this.dia = this.vdata_nasc.substr(0,2);
          this.mes = this.vdata_nasc.substr(2,2);
          this.ano = this.vdata_nasc.substr(4,4);
          this.vdata_nasc = this.ano+'-'+this.mes+'-'+this.dia;
          morador.data_nasc = new Date(this.vdata_nasc);
          
          this.vdt_ini_mor = morador.dt_ini_mor.toString().replace(this.barra,'');
          this.dia = this.vdt_ini_mor.substr(0,2);
          this.mes = this.vdt_ini_mor.substr(2,2);
          this.ano = this.vdt_ini_mor.substr(4,4);
          this.vdt_ini_mor =  this.ano+'-'+this.mes+'-'+this.dia;
          morador.dt_ini_mor = new Date(this.vdt_ini_mor);
         // morador.dt_ini_mor = new  Date();

          this.vdt_fin_mor = morador.dt_fin_mor.toString().replace(this.barra,'');
          this.dia = this.vdt_fin_mor.substr(0,2);
          this.mes = this.vdt_fin_mor.substr(2,2);
          this.ano = this.vdt_fin_mor.substr(4,4);
          this.vdt_fin_mor = this.ano+'-'+this.mes+'-'+this.dia;
          morador.dt_fin_mor = new Date(this.vdt_fin_mor);
         // morador.dt_fin_mor = new Date();

          morador.cpf = morador.cpf.toString();
          morador.rg  = morador.rg.toString();
          

          this.moradoresService.AtualizarMorador(morador).subscribe(resultado => {
             this.visibilidadeTabela = true;
             this.visibilidadeFormularioProp = false;
             alert('Morador atualizado com sucesso !!!');
             if (this.sindico === 'sim') {
                this.SelecionaTodos();
             }
             else
             {
                this.SelecionaUnico();
            };
           });
         }
       else
         { 
           this.moradoresService.SalvarMorador(morador).subscribe(Resultado => {
            this.visibilidadeTabela = true;
            this.visibilidadeFormularioProp = false;
            alert('Morador inserido com sucesso !!!');
            this.moradoresService.PegarTodos().subscribe((registros) => {
                this.moradores  = registros;
                });
              });

      }
    }

    EnviarFormularioSind(): void {
      const sindico:Sindico = this.formulario.value;
      this.vdt_ini_sind = sindico.periodo_ini.toString().replace(this.barra,'');
      this.dia = this.vdt_ini_sind.substr(0,2);
      this.mes = this.vdt_ini_sind.substr(2,2);
      this.ano = this.vdt_ini_sind.substr(4,4);
      this.vdt_ini_sind = this.ano+'-'+this.mes+'-'+this.dia;
      sindico.periodo_ini = new Date(this.vdt_ini_sind);

      this.vdt_fin_sind = sindico.periodo_fin.toString().replace(this.barra,'');
      this.dia = this.vdt_fin_sind.substr(0,2);
      this.mes = this.vdt_fin_sind.substr(2,2);
      this.ano = this.vdt_fin_sind.substr(4,4);
      this.vdt_fin_sind = this.ano+'-'+this.mes+'-'+this.dia;
      sindico.periodo_fin = new Date(this.vdt_fin_sind);
//      sindico.Id = 9;//ber(sindico.unidade_cond);
     
      if(sindico.Id > 10000) {   //forçar incluir
         //this.vdata = proprietario.data_nasc.toString().split('/').join(''); funciona para remover todas as ocorrências
          
          this.sindicosService.AtualizarSindico(sindico).subscribe(resultado => {
             this.visibilidadeTabela = true;
             this.visibilidadeFormularioProp = false;
             alert('Síndico atualizado com sucesso !!!');
             if (this.sindico === 'sim') {
                this.SelecionaTodos();
             }
             else
             {
                this.SelecionaUnico();
            };
           });
         }
       else
         { 
          sindico.Id =  Number(sindico.unidade_cond);

           this.sindicosService.SalvarSindico(sindico).subscribe(Resultado => {
            this.visibilidadeTabela = true;
            this.visibilidadeFormularioProp = false;
            this.visibilidadeFormularioMor = false;
            this.visibilidadeFormularioSind = false;
            alert('Síndico inserido com sucesso !!!');
            this.sindicosService.PegarTodos().subscribe((registros) => {
                this.sindicos  = registros;
                });
              });

      }
    }



    Voltar(): void {
      this.visibilidadeTabela = true;
      this.visibilidadeFormularioProp = false;
      this.visibilidadeFormularioMor = false;
      this.visibilidadeFormularioSind = false;
    }  

    ExibirConfirmacaoExclusaoProp(proprietarioId, nomeProprietario, conteudoModal: TemplateRef<any>): void {
         this.modalRef = this.modalService.show(conteudoModal);
         this.proprietarioId = proprietarioId;
         this.nomeProprietario = nomeProprietario;

    }

    ExcluirProprietario(proprietarioId) {
        this.proprietariosService.ExcluirProprietario(proprietarioId).subscribe(resultado => {
            this.modalRef.hide();
            alert('Proprietário excluído com sucesso');
            this.proprietariosService.PegarTodos().subscribe(registros => {
                this.proprietarios = registros;
            });
        });
    }

    ExibirConfirmacaoExclusaoMor(moradorId, nomeMorador, conteudoModal: TemplateRef<any>): void {
      this.modalRef = this.modalService.show(conteudoModal);
      this.moradorId = moradorId;
      this.nomeMorador = nomeMorador;

 }

 ExcluirMorador(moradorId) {
  this.moradoresService.ExcluirMorador(moradorId).subscribe(resultado => {
      this.modalRef.hide();
      alert('Morador excluído com sucesso');
      this.moradoresService.PegarTodos().subscribe(registros => {
          this.moradores = registros;
      });
  });
}


    SelecionaTodos(): void {
      this.proprietariosService.PegarTodos().subscribe(resultado => {
        this.proprietarios =  resultado;
        
       });
       this.moradoresService.PegarTodos().subscribe(resultado_mor  => {
        this.moradores =  resultado_mor;
   
       });
    }

    SelecionaUnico(): void {
      this.proprietariosService.PegarPeloId(Number(this.session)).subscribe(resultado => {
        
         this.proprietarios = [{
           'proprietarioId':resultado.proprietarioId,
           'unidade_cond': resultado.unidade_cond,
           'dt_ini_prop': resultado.dt_ini_prop,
           'dt_fin_prop': resultado.dt_fin_prop,
           'nome': resultado.nome,
           'sobrenome': resultado.sobrenome,
           'profissao':resultado.profissao,
           'cpf': resultado.cpf,
           'data_nasc': resultado.data_nasc,
           'unidade_alugada': resultado.unidade_alugada,
           'rg': resultado.rg,
           'login': resultado.login,
           'senha': resultado.senha
            }];
 
            this.moradoresService.PegarPeloId(Number(this.session)).subscribe(resultado_mor => {
              this.moradores = [{
             'moradorId' :  resultado_mor.moradorId,
             'unidade_cond' : resultado_mor.unidade_cond,
             'dt_ini_mor' : resultado_mor.dt_ini_mor,
             'dt_fin_mor' : resultado_mor.dt_fin_mor,
             'nome' : resultado_mor.nome,
             'sobrenome' : resultado_mor.sobrenome,
             'profissao' : resultado_mor.profissao,
             'cpf' : resultado_mor.cpf,
             'data_nasc' : resultado_mor.data_nasc,
             'rg' : resultado_mor.rg,
             'login' : resultado_mor.login,
             'senha' : resultado_mor.senha,
            
           }]}); 
            
         });
        
    }

}

    </textarea>
    <br />
    <br />
    <h4> Código HTML/CSS - Componente Proprietário</h4>
    <textarea readonly class="areaCodigo">

<div>
    <table>
    <tr>
    <td *ngFor="let proprietario of proprietarios.slice().reverse() let i = index;">
    <div class="casas">
    <img src="assets/fotos/casa_condominio.jpg" width="100" height="75" /> 
            </div>
           </td>
        </tr>
    <tr class="proprietario">
    <td *ngFor="let proprietario of proprietarios.slice().reverse() let i = index;">
    <div class="casas">
    <p class="casa_n">Proprietário Casa {{proprietario.proprietarioId}}</p>
    <p class="casa_n">{{proprietario.nome}}</p>
             </div>
            </td>
        </tr>
      <!--  <tr class="morador">
          <td *ngFor="let morador of moradores.slice().reverse() let i = index;">
           <div>
            <p class="casa_n">Morador</p>
            <p class="casa_n">{{morador.nome}}</p>
           </div>
          </td>
      </tr> -->
      </table>
</div>
<div class="unidade_logada container">
    <p>Unidade logada :  {{ session }}</p>
</div>
<div class="container p-5" *ngIf="visibilidadeBotoes">
    <div class="border border-light rounded p-2">
    <table>
    <tr>
    <td>
    <button type="button" class="btn btn-sm btn-secondary" (click)="ExibirFormularioCadastroProp()">
                      Novo Proprietário
                 </button>
            </td>            
    <td>
    <button type="button" class="btn btn-sm btn-secondary" (click)="ExibirFormularioCadastroMor()">
                    Novo Morador
                </button>
            </td>
    <td>
    <button type="button" class="btn btn-sm btn-secondary" (click)="ExibirFormularioCadastroSind()">
                    Novo Síndico
                </button>
            </td>
        </tr>
        </table>
    </div>
</div>
          
<div class="container P-5" *ngIf="visibilidadeTabela">

    <h2 style="text-align:center">Gestão Condominial</h2>

    <table class="table table-striped table-hover table-sm" *ngIf="proprietarios">
    <tr class="thead-light">
    <th>Unidade</th>
    <th>Proprietário</th>
    <th>Data Nascimento</th>
    <th>Profissão</th>
    <th>C.P.F</th>
    <th>R.G</th>
    <th>Inquilino ?</th>
    <th style="padding-left: 30px;">A ç õ e s</th>
                </tr>
                
    <tr *ngFor="let proprietario of proprietarios">   <!-- os atributos(campos) devem ser iguais à classe no angular e back-end -->
    <td style="text-align:center">{{proprietario.unidade_cond}}</td>
    <td>{{proprietario.nome}}</td>
    <td style="text-align:center">{{proprietario.data_nasc | date : 'dd/MM/yyyy'}}</td> <!-- mascara nativa DatePipe-->
    <td>{{proprietario.profissao}}</td>
    <td>{{proprietario.cpf | cpf}}</td>
    <td>{{proprietario.rg | rg}}</td>
    <td style="text-align:center">{{proprietario.unidade_alugada}}</td>
    <td>
    <button type="button" style="color:green" (click)="ExibirFormularioAtualizacaoProp(proprietario.proprietarioId)">Atualizar</button>|  
    <button type="button" style="color:red" (click)="ExibirConfirmacaoExclusaoProp(proprietario.proprietarioId, proprietario.nome, conteudoModalProp)">Excluir</button>
                    </td>
                </tr>
        </table>

    <table class="table table-striped table-hover table-sm" *ngIf="proprietarios">
    <tr class="thead-light">
    <th>Unidade</th>
    <th>Morador</th>
    <th>Data Nascimento</th>
    <th>Profissão</th>
    <th>C.P.F</th>
    <th>R.G</th>
    <th style="padding-left: 30px;">A ç õ e s</th>
            </tr>
            
    <tr *ngFor="let morador of moradores">   <!-- os atributos(campos) devem ser iguais à classe no angular e back-end -->
    <td style="text-align:center">{{morador.unidade_cond}}</td>
    <td>{{morador.nome}}</td>
    <td style="text-align:center">{{morador.data_nasc | date : 'dd/MM/yyyy'}}</td> <!-- mascara nativa DatePipe-->
    <td>{{morador.profissao}}</td>
    <td>{{morador.cpf | cpf}}</td>
    <td>{{morador.rg | rg}}</td>
    <td>
    <button type="button" style="color:green" (click)="ExibirFormularioAtualizacaoMor(morador.moradorId)">Atualizar</button>|  
    <button type="button" style="color:red" (click)="ExibirConfirmacaoExclusaoMor(morador.moradorId, morador.nome, conteudoModalMor)">Excluir</button>
                        </td>
            </tr>
        </table>
</div>


<div class="container_form p-5" *ngIf="visibilidadeFormularioProp">
    <div class="sm-12 border border-light rounded p-5 shadow" *ngIf="formulario">
    <table class="tabela_titulo">
    <tr>
    <td class="titulo1">Proprietário : </td>
    <td class="titulo2">{{tituloFormulario}}</td>
                </tr>
            </table>
    <hr />

    <form [formGroup]="formulario" (ngSubmit)="EnviarFormularioProp()">

    <div>
    <div class="input-field col s3">
    <label class="col-form-label">Unidade: </label>
    <input type="text" class="form-control form-control-sm" [maxlength]="1" formControlName="unidade_cond" /> 
                    </div>
                </div>
                
    <div>
    <div class="input-field col s3">
    <label class="col-form-label">Nome</label>
    <input type="text" class="form-control form-control-sm " formControlName="nome" />
                    </div>
                </div>
    <div>
    <div class="input-field col s3">
    <label class="col-form-label">Sobrenome</label>
    <input type="text" class="form-control form-control-sm" [maxlength]="25" formControlName="sobrenome" />
                    </div>
                </div>
    <div class="row">
    <div class="col-form-label col s4">
    <label class="col-form-label">Proprietário desde</label>
    <input type="text" class="form-control form-control-sm " mask="00/00/0000" placeholder="01/01/1900" formControlName="dt_ini_prop" />
                    </div>
    <div class="col-form-label col s4">
    <label class="col-form-label"> à :</label>
    <input type="text" class="form-control form-control-sm " mask="00/00/0000" placeholder="01/01/1900" formControlName="dt_fin_prop" />
                    </div>
                </div>
    <div>
    <div class="col-form-label col s4">
    <label class="col-form-label">Data Nascimento</label>
    <input type="text" class="form-control form-control-sm " mask="00/00/0000" placeholder="01/01/1900" formControlName="data_nasc" />
                    </div>
                </div>
    <div>
    <div class="input-field col s3">
    <label class="col-form-label">Profissão</label>
    <input type="text" class="form-control form-control-sm " formControlName="profissao" />
                    </div>
                </div>
    <div class="row">
    <div class="form-group col-md-6">
    <label>C.P.F.</label>
    <input class="form-control" mask="000.000.000-00" formControlName="cpf" />
                     </div>
    <div class="form-group col-md-6">
    <label>R.G.</label>
    <input type="text" class="form-control" mask="000.000.000-0" formControlName="rg" />
                     </div>
                </div>
    <div>
    <label class="col-form-label">
    <input type="checkbox" class="form-control form-control-sm " formControlName="unidade_alugada" (click)="Chkbx_unidade_alugada($event)" />
    <span>Unidade alugada ?</span>
                    </label>
                </div>
    <div>
    <div class="input-field col s3">
    <label class="col-form-label">Email :</label>
    <input type="text" class="form-control form-control-sm " formControlName="login" />
                     </div>
                </div>
    <div>
    <div class="input-field col s3">
    <label class="col-form-label">Senha :</label>
    <input type="password" class="form-control form-control-sm " formControlName="senha" />
                    </div>
                </div>
                 
    <br />               
       
    <div class="botoes_form">
    <div class="row">
    <button type="submit" class="btn btn-sm btn-outline-secondary">
                           Salvar
                        </button>
                    </div>

    <div class="pl-1">
    <button class="button btn btn-sm btn-light" (click)="Voltar()">
                            Voltar  
                         </button>
                    </div>
                </div>
            </form>
       </div>
    
</div>

<div class="container_form p-5" *ngIf="visibilidadeFormularioMor">
    <div class="sm-12 border border-light rounded p-5 shadow" *ngIf="formulario">
    <table class="tabela_titulo">
    <tr>
    <td class="titulo1">Morador : </td>
    <td class="titulo2">{{tituloFormulario}}</td>
             </tr>
         </table>
    <hr />

    <form [formGroup]="formulario" (ngSubmit)="EnviarFormularioMor()">

    <div>
    <div class="input-field col s3">
    <label class="col-form-label">Unidade: </label>
    <input type="text" class="form-control form-control-sm" [maxlength]="1" formControlName="unidade_cond" /> 
                 </div>
             </div>
             
    <div>
    <div class="input-field col s3">
    <label class="col-form-label">Nome</label>
    <input type="text" class="form-control form-control-sm " formControlName="nome" />
                 </div>
             </div>
    <div>
    <div class="input-field col s3">
    <label class="col-form-label">Sobrenome</label>
    <input type="text" class="form-control form-control-sm" [maxlength]="25" formControlName="sobrenome" />
                 </div>
             </div>
    <div class="row">
    <div class="col-form-label col s4">
    <label class="col-form-label">Proprietário desde</label>
    <input type="text" class="form-control form-control-sm " mask="00/00/0000" placeholder="01/01/1900" formControlName="dt_ini_mor" />
                 </div>
    <div class="col-form-label col s4">
    <label class="col-form-label"> à :</label>
    <input type="text" class="form-control form-control-sm " mask="00/00/0000" placeholder="01/01/1900" formControlName="dt_fin_mor" />
                 </div>
             </div>
    <div>
    <div class="col-form-label col s4">
    <label class="col-form-label">Data Nascimento</label>
    <input type="text" class="form-control form-control-sm " mask="00/00/0000" placeholder="01/01/1900" formControlName="data_nasc" />
                 </div>
             </div>
    <div>
    <div class="input-field col s3">
    <label class="col-form-label">Profissão</label>
    <input type="text" class="form-control form-control-sm " formControlName="profissao" />
                 </div>
             </div>
    <div class="row">
    <div class="form-group col-md-6">
    <label>C.P.F.</label>
    <input class="form-control" mask="000.000.000-00" formControlName="cpf" />
                  </div>
    <div class="form-group col-md-6">
    <label>R.G.</label>
    <input type="text" class="form-control" mask="000.000.000-0" formControlName="rg" />
                  </div>
             </div>
    <div>
    <div class="input-field col s3">
    <label class="col-form-label">Email :</label>
    <input type="text" class="form-control form-control-sm " formControlName="login" />
                  </div>
             </div>
    <div>
    <div class="input-field col s3">
    <label class="col-form-label">Senha :</label>
    <input type="password" class="form-control form-control-sm " formControlName="senha" />
                 </div>
             </div>
              
    <br />               
    
    <div class="botoes_form">
    <div class="row">
    <button type="submit" class="btn btn-sm btn-outline-secondary">
                        Salvar
                     </button>
                 </div>

    <div class="pl-1">
    <button class="button btn btn-sm btn-light" (click)="Voltar()">
                         Voltar  
                      </button>
                 </div>
             </div>
         </form>
    </div>
</div>

<div class="container_form p-5" *ngIf="visibilidadeFormularioSind">
    <div class="sm-12 border border-light rounded p-5 shadow" *ngIf="formulario">
    <table class="tabela_titulo">
    <tr>
    <td class="titulo1">Síndico : </td>
    <td class="titulo2">{{tituloFormulario}}</td>
             </tr>
         </table>
    <hr />

    <form [formGroup]="formulario" (ngSubmit)="EnviarFormularioSind()">
    <div>
    <div class="input-field col s3">
    <label class="col-form-label">Unidade: </label>
    <input type="text" class="form-control form-control-sm" [maxlength]="1" formControlName="unidade_cond" /> 
                </div>
            </div>
             
    <div class="row">
    <div class="col-form-label col s4">
    <label class="col-form-label">Síndico desde</label>
    <input type="text" class="form-control form-control-sm " mask="00/00/0000" placeholder="01/01/1900" formControlName="periodo_ini" />
                 </div>
    <div class="col-form-label col s4">
    <label class="col-form-label"> até:</label>
    <input type="text" class="form-control form-control-sm " mask="00/00/0000" placeholder="01/01/1900" formControlName="periodo_fin" />
                 </div>
             </div>
              
    <br />               
    
    <div class="botoes_form">
    <div class="row">
    <button type="submit" class="btn btn-sm btn-outline-secondary">
                        Salvar
                     </button>
                 </div>

    <div class="pl-1">
    <button class="button btn btn-sm btn-light" (click)="Voltar()">
                         Voltar  
                      </button>
                 </div>
             </div>
         </form>
    </div>
</div>


<ng-template #conteudoModalProp>
    <div class="modal-header">
    <h4 class="modal-title pull-left">Confirmação de exclusão</h4>
    <button type="button" class="btn-close close pull-right" aria-label="Close" (click)="modalRef.hide()">
    <span aria-hidden="true" class="visually-hidden">&times;</span>
      </button>
    </div>

    <div class="modal-body">
            Prosseguir com a exclusão do proprietário {{nomeProprietario}}
            </div>
        
    <div class="modal-footer">
    <button type="button" class="btn btn-light" (click)="modalRef.hide()">Não</button>
    <button type="button" class="btn btn-outline-danger" (click)="ExcluirProprietario(proprietarioId)">Sim</button>
    </div>
</ng-template>

<ng-template #conteudoModalMor>
    <div class="modal-header">
    <h4 class="modal-title pull-left">Confirmação de exclusão</h4>
    <button type="button" class="btn-close close pull-right" aria-label="Close" (click)="modalRef.hide()">
    <span aria-hidden="true" class="visually-hidden">&times;</span>
      </button>
    </div>

    <div class="modal-body">
        Prosseguir com a exclusão do morador {{nomeMorador}}
        </div>
    
    <div class="modal-footer">
    <button type="button" class="btn btn-light" (click)="modalRef.hide()">Não</button>
    <button type="button" class="btn btn-outline-danger" (click)="ExcluirMorador(moradorId)">Sim</button>
    </div>

</ng-template>


    </textarea>
    <br />
    <br />
    <h4> Código TypeScrypt - Serviço Proprietário</h4>
    <textarea readonly class="areaCodigo">
import { HttpClient, HttpHeaders } from '&angular/common/http';
import { APP_ID, Injectable } from '&angular/core';
import { Observable } from 'rxjs';
import { Proprietario } from './Proprietario';

const httpOptions = {
  headers: new HttpHeaders({
    'Content-Type' : 'application/json'
  })
};

&Injectable({
  providedIn: 'root'
})
export class ProprietariosService {
  //url = 'http://localhost:5280/api/proprietarios';
  url = 'http://admisys.com.br/apiproprietario/api/proprietarios';
 

  constructor(private http : HttpClient) {}
   
  PegarTodos() : Observable<Proprietario[]>{
    return this.http.get<Proprietario[]>(this.url);
  }
   
  PegarPeloId(proprietarioId: number) : Observable<Proprietario>{
        const apiUrl =  `${this.url}/${proprietarioId}`;
        return this.http.get<Proprietario>(apiUrl);
           

  }

  SalvarProprietario(proprietario: Proprietario) : Observable<any>{
    return this.http.post<Proprietario>(this.url, proprietario, httpOptions);
  }

  AtualizarProprietario(proprietario: Proprietario) : Observable<any>{
    return this.http.put<Proprietario>(this.url, proprietario, httpOptions);
  }

  ExcluirProprietario(proprietarioId: number) : Observable<any>{
    const apiUrl =  `${this.url}/${proprietarioId}`;
    return this.http.delete<number>(apiUrl, httpOptions);
}

}
    </textarea>
    <br />
    <span style="color:green">
            No botão do portfólio referente a Web Api disponibilizo o código da API usado neste projeto.
    </span>
</div>